all_docs = lapply(file_list, readerPlain)
names(all_docs) = file_list
names(all_docs) = sub('.txt', '', names(all_docs))
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
https://gist.github.com/jgscott/28d9d1287a0c3c1477e2113f6758d5ff
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
library(forecast)
library(tseries)
library(fpp)
?petrol
plot(petrol)
pairs(petrol)
lm(petrol$Petrol~.)
lm(petrol, Petrol~.)
?lm
model1 = lm(Petrol~., petrol)
summary(model1)
plot(Petrol$petrol,model1$residuals)
plot(petrol$Petrol,model1$residuals)
petrol
plot(petrol[Petrol],model1$residuals)
plot(petrol[,Petrol],model1$residuals)
plot(petrol[,'Petrol'],model1$residuals)
plot(petrol[,'Petrol'],model1$residuals,main="Residuals vs. Actual")
install.packages(lpSolve)
install.packages("lpSolve")
library(lpSolve)
c=c(-80,-129)
b=c(10000,3000,600,1200)
A=matrix(c(5,1,1,0,6,2,0,1),4,2)
A
A
A = t(A)
A
dir
install.packages("lpSolve")
library(lpSolve)
?lp
c = c(2000,3000) #objectives
b = c(1000,1200,450)
A = matrix((c3,2,2,4,1,1),3,2)
A = matrix(c(3,2,2,4,1,1),3,2)
A
A = matrix(c(3,2,1,2,4,1),3,2)
A
s = lp(direction="max",c,A,dir,b)
c = c(-2000,-3000) #objectives
s = lp(direction="max",c,A,dir,b)
c = c(-2000,-3000)
b = c(1000,1200,450)
A = matrix(c(3,2,1,2,4,1),3,2)
dir = c("<=","<=","<=")
s = lp("max",c,A,dir,b)
s$solution
s$obival
s$objval
C
A
s
s = lp("min",c,A,dir,b)
s$solution
s$objval
c = c(2000,3000)
b = c(1000,1200,450)
A = matrix(c(3,2,1,2,4,1),3,2)
dir = c("<=","<=","<=")
s = lp("max",c,A,dir,b)
s$solution
s$objval
fert = 200
index = 1
c = c(2000,3000)
A = matrix(c(3,2,1,2,4,1),3,2)
dir = c("<=","<=","<=")
answers = matrix(c(0),21,2)
for(fert<2300):
b = c(1000,fert,450)
s = lp("max",c,A,dir,b)
answers[index,1] = s$solution
answers[index,2] = s$objval
index += 1
while(fert<2300):
b = c(1000,fert,450)
s = lp("max",c,A,dir,b)
answers[index,1] = s$solution
answers[index,2] = s$objval
index = index+1
answers
fert = 2200
index = 1
c = c(2000,3000)
A = matrix(c(3,2,1,2,4,1),3,2)
dir = c("<=","<=","<=")
answers = matrix(c(0),21,2)
while(fert>100):
b = c(1000,fert,450)
s = lp("max",c,A,dir,b)
answers[index,1] = s$solution
answers[index,2] = s$objval
index = index-100
?while
while
fert = 2200
index = 1
c = c(2000,3000)
A = matrix(c(3,2,1,2,4,1),3,2)
dir = c("<=","<=","<=")
answers = matrix(c(0),21,3)
while(fert>100){
b = c(1000,fert,450)
s = lp("max",c,A,dir,b)
answers[index,1] = s$solution[1]
answers[index,2] = s$solution[2]
answers[index,3] = s$objval
index = index-100
}
answers
fert = 2200
index = 1
c = c(2000,3000)
A = matrix(c(3,2,1,2,4,1),3,2)
dir = c("<=","<=","<=")
answers = matrix(c(0),21,3)
while(fert>100){
b = c(1000,fert,450)
s = lp("max",c,A,dir,b)
answers[index,1] = s$solution[1]
answers[index,2] = s$solution[2]
answers[index,3] = s$objval
index = index-1
fert = fert-100
}
answers
fert = 2200
index = 1
c = c(2000,3000)
A = matrix(c(3,2,1,2,4,1),3,2)
dir = c("<=","<=","<=")
answers = matrix(c(0),21,3)
while(fert>100){
b = c(1000,fert,450)
s = lp("max",c,A,dir,b)
answers[index,1] = s$solution[1]
answers[index,2] = s$solution[2]
answers[index,3] = s$objval
index = index+1
fert = fert-100
}
answers
plot(answers[:,3])
plot(answers[,3])
plot(answers[,1])
plot(answers[,2])
plot(answers[,3])
c = c(0.18,0.23,0.05)
b = c(2250,-2000,50000,-5000,10)
A = matrix(c(72,-72,107,-107,1,121,-121,500,-500,1,65,-65,0,0,1),5,3)
dir = c("<=","<=","<=")
s = lp("min",c,A,dir,b)
dir = c("<=","<=","<=","<=","<=")
s = lp("min",c,A,dir,b)
s$solution
s$objval
A
c = c(0.18,0.23,0.05)
b = c(-2250,2000,-50000,5000,-10)
A = matrix(c(-72,72,-107,107,-1,-121,121,-500,500,-1,-65,65,0,0,-1),5,3)
dir = c(">=",">=",">=",">=",">=")
s = lp("min",c,A,dir,b)
s$solution
s$objval
c = c(-0.18,-0.23,-0.05)
b = c(2250,-2000,50000,-5000,10)
A = matrix(c(72,-72,107,-107,1,121,-121,500,-500,1,65,-65,0,0,1),5,3)
dir = c(">=",">=",">=",">=",">=")
s = lp("min",c,A,dir,b)
s$solution
s$objval
c = c(-0.18,-0.23,-0.05)
b = c(2250,-2000,50000,-5000,10)
A = matrix(c(72,-72,107,-107,1,121,-121,500,-500,1,65,-65,0,0,1),5,3)
dir = c("<=","<=","<=","<=","<=")
s = lp("min",c,A,dir,b)
s$solution
s$objval
c = c(-0.18,-0.23,-0.05)
b = c(-2250,2000,-50000,5000,-10)
A = matrix(c(-72,72,-107,107,-1,-121,121,-500,500,-1,-65,65,0,0,-1),5,3)
dir = c(">=",">=",">=",">=",">=")
s = lp("min",c,A,dir,b)
s$solution
s$objval
c = c(0.18,0.23,0.05)
b = c(-2250,2000,-50000,5000,-10)
A = matrix(c(-72,72,-107,107,-1,-121,121,-500,500,-1,-65,65,0,0,-1),5,3)
dir = c(">=",">=",">=",">=",">=")
s = lp("max",c,A,dir,b)
s$solution
s$objval
c = c(-0.18,-0.23,-0.05)
b = c(2250,-2000,50000,-5000,10,10,10)
A = matrix(c(72,-72,107,-107,1,0,0,121,-121,500,-500,0,1,0,65,-65,0,0,0,0,1),7,3)
dir = c("<=","<=","<=","<=","<=","<=","<=")
s = lp("min",c,A,dir,b)
s$solution
s$objval
c = c(1,1.3,1.43,1,1.2,1.68)
b = c(-1.2,2,-1.5,2,-2,3,2,3)
A = matrix(c(-1,1,0,0,0,0,1,0,0,0,-1.3,1.3,0,0,1,0,0,0,0,0,-1.43,1.43,1,0,-1,1,0,0,0,0,0,1,0,0,-1.2,1.2,0,0,0,1,0,0,0,0,-1.68,1.68,0,1),8,6)
dir = c("<=","<=","<=","<=","<=","<=","<=","<=")
s = lp("max",c,A,dir,b)
s$solution
s$objval
library('lpSolve')
c<-c(80,129)
A<-matrix(0,4,2)
A[1,]<-c(5,6)
A[2,]<-c(1,2)
A[3,]<-c(1,0)
A[4,]<-c(0,1)
b<-c(10000,3000,600,1200)
#All constraints have a <=
dir<-rep("<=",4)
s=lp("max",c,A,dir,b,compute.sens = 1)
cat("Status:",s$status,"\n")
cat("Solution:",s$solution,"\n")
cat("Profit:",s$objval,"\n")
s$duals
s$duals.from
s$duals.to
s$sens.coef.from
s$sens.coef.to
c<-rep(c(2000,2500,5000,3500),3)
A=matrix(0,10,12)
A[1,1:4]<-1
A[2,5:8]<-1
A[3,9:12]<-1
#volume constraints
A[4,1:4]<-c(400,300,200,500)
A[5,5:8]<-c(400,300,200,500)
A[6,9:12]<-c(400,300,200,500)
#availability constraints
A[7:10,1:4]<-diag(4)
A[7:10,5:8]<-diag(4)
A[7:10,9:12]<-diag(4)
b<-c(10,8,12,5000,4000,8000,18,10,5,20)
dir<-rep("<=",10)
s=lp("max",c,A,dir,b,compute.sens = 1)
cat("Status:",s$status,"\n")
cat("Solution:","\n")
print(t(matrix(s$solution,4,3)))
cat("Profit:",s$objval,"\n")
s$duals
install.packages("lpSolve")
dedicate_g12.m <- function(P, C, M, L) {
# create an LP model with 0 constraints (we will add constraints later)
# and N decision variables - for N different bond prices
pcLP <- make.lp(0,length(P))
# set objective coefficients
set.objfn(pcLP, P)
# set objective direction
lp.control(pcLP,sense = 'min')
# add the constraints
for (i in 1:length(L)) {
expectedInflow <- (!(M < i))*C + (M == i)*100
# print(expectedInflow)
add.constraint(pcLP, expectedInflow, "=", L[i])
}
# label the constraints and variables
varNames = c()
for (i in 1:length(P)) {
varNames[i] <- paste("Bond",i)
}
constraintNames = c()
for (i in 1:length(L)) {
constraintNames[i] <- paste("Year",i)
}
dimnames(pcLP) <- list(constraintNames, varNames)
# solve the model, if this return 0 an optimal solution is found
solve(pcLP)
# this return the proposed solution
get.variables(pcLP)
}
P <- c(102, 99, 101, 98, 98, 104, 100, 101, 102, 94)
C <- c(5, 3.5, 5, 3.5, 4, 9, 6, 8, 9, 7)
M <- c(1, 2, 2, 3, 4, 5, 5, 6, 7, 8)
L <- c(12, 18, 20, 20, 16, 15, 12 ,10)*1000
dedicate_g12.m(P, C, M, L)
library(lpSolveAPI)
dedicate_g12.m <- function(P, C, M, L) {
# create an LP model with 0 constraints (we will add constraints later)
# and N decision variables - for N different bond prices
pcLP <- make.lp(0,length(P))
# set objective coefficients
set.objfn(pcLP, P)
# set objective direction
lp.control(pcLP,sense = 'min')
# add the constraints
for (i in 1:length(L)) {
expectedInflow <- (!(M < i))*C + (M == i)*100
# print(expectedInflow)
add.constraint(pcLP, expectedInflow, "=", L[i])
}
# label the constraints and variables
varNames = c()
for (i in 1:length(P)) {
varNames[i] <- paste("Bond",i)
}
constraintNames = c()
for (i in 1:length(L)) {
constraintNames[i] <- paste("Year",i)
}
dimnames(pcLP) <- list(constraintNames, varNames)
# solve the model, if this return 0 an optimal solution is found
solve(pcLP)
# this return the proposed solution
get.variables(pcLP)
}
dedicate_g12.m(P, C, M, L)
?lp
library(lpSolveAPI)
?lp
?make.lp
modLP<-make.lp(0,10)
set.objfn(modLP, c(102,99,101,98,98,104,100,101,102,94))
lp.control(modLP,sense='min')
add.constraint(modLP,c(105,3.5,5,3.5,4,9,6,8,9,7), ">=",12000)
add.constraint(modLP,c(0,103.5,105,3.5,4,9,6,8,9,7), ">=",18000)
add.constraint(modLP,c(0,0,0,103.5,4,9,6,8,9,7), ">=",20000)
add.constraint(modLP,c(0,0,0,0,104,9,6,8,9,7), ">=",20000)
add.constraint(modLP,c(0,0,0,0,0,109,106,8,9,7), ">=",16000)
add.constraint(modLP,c(0,0,0,0,0,0,0,108,9,7), ">=",15000)
add.constraint(modLP,c(0,0,0,0,0,0,0,0,109,7), ">=",12000)
add.constraint(modLP,c(0,0,0,0,0,0,0,0,0,107), ">=",10000)
varNames <- c("X1","X2","X3","X4","X5","X6","X7","X8","X9","X10")
constraintNames <- c("Year1","Year2","Year3","Year4","Year5","Year6","Year7","Year8")
dimnames(modLP) <- list(constraintNames, varNames)
solve(modLP)
optimal = paste("$",formatC(get.objective(modLP),format="f",digits=2,big.mark=","))
print(optimal)
library(lpSolveAPI)
modLP<-make.lp(0,10)
set.objfn(modLP, c(102,99,101,98,98,104,100,101,102,94))
lp.control(modLP,sense='min')
add.constraint(modLP,c(105,3.5,5,3.5,4,9,6,8,9,7), ">=",12000)
add.constraint(modLP,c(0,103.5,105,3.5,4,9,6,8,9,7), ">=",18000)
add.constraint(modLP,c(0,0,0,103.5,4,9,6,8,9,7), ">=",20000)
add.constraint(modLP,c(0,0,0,0,104,9,6,8,9,7), ">=",20000)
add.constraint(modLP,c(0,0,0,0,0,109,106,8,9,7), ">=",16000)
add.constraint(modLP,c(0,0,0,0,0,0,0,108,9,7), ">=",15000)
add.constraint(modLP,c(0,0,0,0,0,0,0,0,109,7), ">=",12000)
add.constraint(modLP,c(0,0,0,0,0,0,0,0,0,107), ">=",10000)
varNames <- c("X1","X2","X3","X4","X5","X6","X7","X8","X9","X10")
constraintNames <- c("Year1","Year2","Year3","Year4","Year5","Year6","Year7","Year8")
dimnames(modLP) <- list(constraintNames, varNames)
solve(modLP)
optimal = paste("$",formatC(get.objective(modLP),format="f",digits=2,big.mark=","))
print(optimal)
vars = round(get.variables(modLP),2)
matrix(data=c(varNames,vars),nrow=2,ncol=10,byrow=TRUE)
dedicate_g12.m <- function(P, C, M, L) {
# create an LP model with 0 constraints (we will add constraints later)
# and N decision variables - for N different bond prices
pcLP <- make.lp(0,length(P))
# set objective coefficients
set.objfn(pcLP, P)
# set objective direction
lp.control(pcLP,sense = 'min')
# add the constraints
for (i in 1:length(L)) {
expectedInflow <- (!(M < i))*C + (M == i)*100
# print(expectedInflow)
add.constraint(pcLP, expectedInflow, "=", L[i])
}
# label the constraints and variables
varNames = c()
for (i in 1:length(P)) {
varNames[i] <- paste("Bond",i)
}
constraintNames = c()
for (i in 1:length(L)) {
constraintNames[i] <- paste("Year",i)
}
dimnames(pcLP) <- list(constraintNames, varNames)
# solve the model, if this return 0 an optimal solution is found
solve(pcLP)
# return the entire model so we can perform calculations
return(pcLP)
}
P <- c(102, 99, 101, 98, 98, 104, 100, 101, 102, 94)
C <- c(5, 3.5, 5, 3.5, 4, 9, 6, 8, 9, 7)
M <- c(1, 2, 2, 3, 4, 5, 5, 6, 7, 8)
L <- c(12, 18, 20, 20, 16, 15, 12 ,10)*1000
model = dedicate_g12.m(P, C, M, L)
optimal = paste("$",formatC(get.objective(model),format="f",digits=2,big.mark=","))
print(optimal)
vars = round(get.variables(model),2)
matrix(data=c(varNames,vars),nrow=2,ncol=10,byrow=TRUE)
library(readxl)
bonds = read_excel("Bonds.xlsx")
bonds$Maturity <- as.Date(bonds$Maturity)
setwd("~/GitHub/Optimization")
bonds = read_excel("Bonds.xlsx")
bonds$Maturity <- as.Date(bonds$Maturity)
dates = as.Date(c("2017-06-30","2017-12-31","2018-06-30","2018-12-31","2019-06-30","2019-12-31","2020-06-30","2020-12-31","2021-06-30","2021-12-31","2022-06-30","2022-12-31"))
bonds = bonds[bonds$Maturity %in% dates,]
P = bonds$Asked
C = bonds$Coupon/2
periods = seq_along(dates)
names(periods) = dates
M = rep(0,length(bonds$Maturity))
for (i in seq_along(M)){
date = toString(bonds$Maturity[i])
period = periods[date]
M[i] = period
}
L = c(9,9,10,10,6,6,9,9,10,10,5,3)*1000000
model = dedicate_g12.m(P, C, M, L)
optimal = paste("$",formatC(get.objective(model),format="f",digits=2,big.mark=","))
print(optimal)
results = bonds[,c('Maturity','Coupon','Asked')]
results$Amount = get.variables(model)
kable(results, digits=2)
results
duals = get.sensitivity.rhs(model)[[1]][1:12]
plot(dates, duals)
model$sens.coef.to
model
get.sensitivity.rhs(model)
sens = get.sensitivity.rhs(model)[1:12,c("dualsfrom","dualstill")]
sens = get.sensitivity.rhs(model)[[c("dualsfrom","dualstill")]][1:12]
sens = get.sensitivity.rhs(model)[c("dualsfrom","dualstill")][1:12]
sens
sens = get.sensitivity.rhs(model)[:12,[2:3]]
sens = get.sensitivity.rhs(model)[1:12,[2:3]]
sens = get.sensitivity.rhs(model)[1:12,2:3]
dim(get.sensitivity.rhs(model))
get.sensitivity.rhs(model)
sens = get.sensitivity.rhs(model)$dualsfrom
sens
sens = get.sensitivity.rhs(model)[[1:2]][1:12]
sens
sens = get.sensitivity.rhs(model)[[1:12]][1:2]
sens = get.sensitivity.rhs(model)[[1:12]]
sens = get.sensitivity.rhs(model)[[2:3]]
sens
dtype(get.sensitivity.rhs(model))
type(get.sensitivity.rhs(model))
get.sensitivity.rhs(model).type()
?get.sensitivity.rhs
sens = get.sensitivity.rhs(model)[2:3]
sens
sens = get.sensitivity.rhs(model)[2:3][1:12,]
sens = get.sensitivity.rhs(model)[2:3]
sens
?matrix
matrix(data=sens,nrow=12,ncol=2)
matrix(data=c(sens$dualsfrom,sense$dualstill),nrow=12,ncol=2)
matrix(data=c(sens$dualsfrom,sens$dualstill),nrow=12,ncol=2)
dim(sens)
length(sens)
nrow(sens)
length(sens$dualsfrom)
matrix(data=c(sens$dualsfrom,sens$dualstill),nrow=length(sens$dualsfrom),ncol=2)
sens_matrix = matrix(data=c(sens$dualsfrom,sens$dualstill),nrow=length(sens$dualsfrom),ncol=2)
?rownames
rownames(sens_matrix) = c("Duals From","Duals To")
colnames(sens_matrix) = c("Duals From","Duals To")
sens_matrix
sens_matrix = sens_matrix[1:12,]
colnames(sens_matrix) = c("Duals From","Duals To")
sens_matrix
?format
sens_matrix = format(sens_matrix[1:12,],scientific=FALSE,big.mark=",")
sens_matrix
sens_matrix = format(sens_matrix[1:12,],big.mark=",")
sens_matrix
sens_matrix = sens_matrix[1:12,]
sens_matrix
sens = get.sensitivity.rhs(model)[2:3]
sens_matrix = matrix(data=c(sens$dualsfrom,sens$dualstill),nrow=length(sens$dualsfrom),ncol=2)
sens_matrix = sens_matrix[1:12,]
sens_matrix
sens = get.sensitivity.rhs(model)[2:3]
sens_matrix = matrix(data=c(sens$dualsfrom,sens$dualstill),nrow=length(sens$dualsfrom),ncol=2)
sens_matrix = format(sens_matrix[1:12,],big.mark=",")
sens_matrix
sens = get.sensitivity.rhs(model)[2:3]
sens_matrix = matrix(data=c(sens$dualsfrom,sens$dualstill),nrow=length(sens$dualsfrom),ncol=2)
sens_matrix = sens_matrix[1:12,]
sens_matrix
colnames(sens_matrix) = c("Duals From","Duals To")
sens_matrix
rows = c("",12)
for(i in 1:12){
rows[i] = paste("Liability Constraint ",i)
}
rownames(sens_matrix) = rows
sens_matrix
get.sensitivity.rhs(model)
sens_matrix
sens_matrix[2]
sens_matrix[[2]]
sense_matrix$Duals To
vars = round(get.variables(modLP),2)
vars_matrix = matrix(data=vars,nrow=1,ncol=10)
vars_matrix
rownames(vars_matrix) = c("Bond Qty")
